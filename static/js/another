<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTU Dashboard</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="dropdown-menu">
        <select id="selDataset"></select>
    </div>
    <div id="bar-chart"></div>
    <div id="bubble-chart"></div>
    <div id="sample-metadata"></div>
    <script src="app.js"></script>
</body>
</html>


// URL to fetch the data
const url = "https://static.bc-edx.com/data/dl-1-2/m14/lms/starter/samples.json";

// Fetch data from the URL
d3.json(url).then(data => {
    // Populate the dropdown menu
    const dropdown = d3.select("#selDataset");
    data.names.forEach(id => {
        dropdown.append("option").text(id).property("value", id);
    });

    // Initialize the dashboard with the first sample
    const firstSample = data.names[0];
    updateDashboard(firstSample, data);
});

// Function to update the dashboard
function updateDashboard(sampleId, data) {
    // Get metadata and sample data for the selected sample
    const metadata = data.metadata.find(meta => meta.id.toString() === sampleId);
    const sampleData = data.samples.find(sample => sample.id === sampleId);

    // Update the metadata panel
    updateMetadata(metadata);

    // Create bar chart
    createBarChart(sampleData);

    // Create bubble chart
    createBubbleChart(sampleData);
}

// Function to update the metadata panel
function updateMetadata(metadata) {
    const panel = d3.select("#sample-metadata");
    panel.html(""); // Clear existing content
    Object.entries(metadata).forEach(([key, value]) => {
        panel.append("p").text(`${key}: ${value}`);
    });
}

// Function to create a horizontal bar chart
function createBarChart(sampleData) {
    const sampleValues = sampleData.sample_values.slice(0, 10).reverse();
    const otuIds = sampleData.otu_ids.slice(0, 10).reverse().map(id => `OTU ${id}`);
    const otuLabels = sampleData.otu_labels.slice(0, 10).reverse();

    const trace = {
        x: sampleValues,
        y: otuIds,
        text: otuLabels,
        type: 'bar',
        orientation: 'h'
    };

    const layout = {
        title: "Top 10 OTUs",
        margin: { t: 30, l: 150 }
    };

    Plotly.newPlot("bar-chart", [trace], layout);
}

// Function to create a bubble chart
function createBubbleChart(sampleData) {
    const otuIds = sampleData.otu_ids;
    const sampleValues = sampleData.sample_values;
    const otuLabels = sampleData.otu_labels;

    const trace = {
        x: otuIds,
        y: sampleValues,
        text: otuLabels,
        mode: 'markers',
        marker: {
            size: sampleValues,
            color: otuIds,
            colorscale: 'Earth'
        }
    };

    const layout = {
        title: "OTU Samples",
        xaxis: { title: "OTU ID" },
        yaxis: { title: "Sample Value" },
        hovermode: "closest"
    };

    Plotly.newPlot("bubble-chart", [trace], layout);
}


// Event listener for dropdown menu change
d3.select("#selDataset").on("change", function() {
    const selectedSample = d3.select(this).property("value");
    d3.json(url).then(data => {
        updateDashboard(selectedSample, data);
    });
});
